1.在<ds>节点中添加<property name="defaultAutoCommit" value="false">子节点，取消事务的自动提交

2.正常编写dao，bo，action，并配置applicationContext.xml中的注入
	
	注意事项：必须修改struts-config.xml中action的类型为org.springframework.web.struts.DelegatingActionProxy，否则无法注入Bo

3.在applicationContext.xml图形界面beans-右键-Edit Namespaces-添加aop和tx，并编辑xml文件格式化，选择2.5版本(与spring版本对应s)

4.在applicationContext.xml中配置事务管理器，如下：

	<bean id="tran" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	事务依赖Session，所以注入一个sessionFactory来产生Session

5.在applicationContext.xml中增加<tx:advice>节点，如下：

	<tx:advice id="tx" transaction-manager="tran">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	transaction-manager="tran"引用的是第四步中配置的事务管理器的id。
	method节点配置对那些方法添加事务，并且配置需要什么样的事务环境。

6.在applicationContext.xml中添加<aop:config>节点，如下：

	<aop:config>
		<aop:pointcut id="bo" expression="execution(* com.bo.impl.*.*(..))"/>
		<aop:advisor advice-ref="tx" pointcut-ref="bo"/>
	</aop:config>

	<aop:advisor>：通知者(advisor)，先通过pointcut-ref="bo"找到需要被通知的切面，即<aop:pointcut>的id；
					advice-ref，即事务的策略
	<aop:pointcut>：expression指明了哪些方法
	(	*	 com.bo.impl.	*	.	*	(	.	.	)	)
	   方法返回值		       类名	      方法名	     参数类型 参数名
	