Ant的构建文件 
(1) src存放文件。 
(2) class存放编译后的文件。 
(3) lib存放第三方JAR包。 
(4) dist存放打包，发布以后的代码。 
每个构建文件定义一个唯一的项目(Project元素)。每个项目下可以定义很多目标(target元素)，这些目标之间可以有依赖关系。当执行 
这类目标时，需要执行他们所依赖的目标。 

Ant中的任务可以为3类: 
　(1) 核心任务。核心任务是Ant自带的任务。 
　(2) 可选任务。可选任务是来自第三方的任务，因此需要一个附加的JAR文件。 
　(3) 用户自定义的任务。用户自定义的任务是用户自己开发的任务。 


<project default="" basedir="" name=""> 
1,<project>标签时构建文件的根标签。它可以有多个内在属性， 
(1) default表示默认的运行目标，这个属性是必须的。 
(2) basedir表示项目的基准目录。 
(3) name表示项目名。 
(4) description表示项目的描述。 
每个构建文件都对应于一个项目，但是大型项目经常包含大量的子项目，每一个子项目都可以有自己的构建文件。 

<property　name="${name}" value="${value}"> 

2.<target>标签 
<target name="init">      这个Target是用来初始化一些属性 
<target name="prepare" depends="init"> 这个Target是用来生成工作目录 
<target name="clean" depends="init"> 这个Target是清除中间过程的目录及文件 
<target name="cleanall" depends="init"> 这个Target是所有的结果，保持目录的清洁 
<target name="ejbdoclet" depends="prepare"> 这个Target是预编译Bean文件，生成Bean的其他文件和DD描述信息 
<target name="copysrcfile" depends="ejbdoclet"> 这个Target是将生成的代码和DD描述文件拷贝到相应的目录 
<target name="compile" depends="copysrcfile"> 这个Target是编译所有的源程序，包括生成的源程序 
<target name="copyDDfile" depends="copysrcfile"> 这个Target是将DD文件复制到编译的目录准备打包 
<target name="jar_ejb" depends="compile,copyDDfile"> 这个Target是打包EJB 
<target name="ejbc" depends="jar_ejb">    这个Target是编译EJB包 
<target name="ear_app" depends="ejbc">    这个Target是将EJB包打包成一个应用 
<target name="deploy" depends="init">    这个Target是发布应用到Weblogic上 
<target name="compile_client" depends="init"> 这个Target是编译客户端程序 
<target name="run" depends="init,compile_client"> 这个Target是运行客户端程序 

(1).name表示标明，这个属性是必须的。 
　(2).depends表示依赖的目标。 
　(3)if表示仅当属性设置时才执行。 
　(4)unless表示当属性没有设置时才执行。 
　(5)description表示项目的描述。 

3.<mkdir>标签　　　　 (---------创建一个新的子目录) 
该标签用于创建一个目录，它有一个属性dir用来指定所创建的目录名，其代码如下： 
<mkdir dir="${class.root}"/> 
这个目录已经被前面的property标签所指定 

4<jar>标签 (---------档案,文件) 
<jar jarfile="${lib.dir}/${name}.jar" basedir="${build.dest}" includes="**"/> 
该标签用来生成一个JAR文件，其属性如下。 
(1) destfile表示JAR文件名。 
(2) basedir表示被归档的文件名。 
(3) includes表示别归档的文件模式。 
(4) exchudes表示被排除的文件模式。 

5．<javac标签> 
<javac srcdir="${build.src}" destdir="${build.dest}" debug="${debug}" optimize="${optimize}"> 
      <classpath refid="classpath"/> 
     
该标签用于编译一个或一组java文件，其属性如下。 
(1).srcdir表示源程序的目录。 
(2).destdir表示class文件的输出目录。 
(3).include表示被编译的文件的模式。 
(4).excludes表示被排除的文件的模式。 
(5).classpath表示所使用的类路径。 
(6).debug表示包含的调试信息。 
(7).optimize表示是否使用优化。 
(8).verbose 表示提供详细的输出信息。 
(9).fileonerror表示当碰到错误就自动停止。 

6．<java>标签 
该标签用来执行编译生成的.class文件，其属性如下。 
(1).classname 表示将执行的类名。 
(2).jar表示包含该类的JAR文件名。 
(3).classpath所表示用到的类路径。 
(4).fork表示在一个新的虚拟机中运行该类。 
(5).failonerror表示当出现错误时自动停止。 
(6).output 表示输出文件。 
(7).append表示追加或者覆盖默认文件。 

7.<delete>标签 

<delete> 
<fileset dir="${dir}"> 
<include name="${include}"/> 
<exclude name="${exclude}"/> 
</fileset> 
</delete> 

该标签用于删除一个文件或一组文件，去属性如下。 
(1)/file表示要删除的文件。 
(2).dir表示要删除的目录。 
(3).includeEmptyDirs 表示指定是否要删除空目录，默认值是删除。 
(4).failonerror 表示指定当碰到错误是否停止，默认值是自动停止。 
(5).verbose表示指定是否列出所删除的文件，默认值为不列出。 

8.<copy>标签 
<copy todir="${build.src}"><fileset dir="${src.dir}"/></copy> 
该标签用于文件或文件集的拷贝，其属性如下。 
(1).file 表示源文件。 
(2).tofile 表示目标文件。 
(3).todir 表示目标目录。 
(4).overwrite 表示指定是否覆盖目标文件，默认值是不覆盖。 
(5).includeEmptyDirs 表示制定是否拷贝空目录，默认值为拷贝。 
(6).failonerror 表示指定如目标没有发现是否自动停止，默认值是停止。 
(7).verbose 表示制定是否显示详细信息，默认值不显示。 



Ant的数据类型 在　org.apache.tool.ant.types包　中 
1. argument 类型 
可以通过<arg>元素向其传递命令行参数.　属性如下: 
(1).values 是一个命令参数。如果参数种有空格，但又想将它作为单独一个值，则使用此属性。 
(2).file表示一个参数的文件名。在构建文件中，此文件名相对于当前的工作目录。 
(3).line表示用空格分隔的多个参数列表。 
(4).path表示路径。 

2.ervironment 类型 
由Ant构建文件调用的外部命令或程序，<env>元素制定了哪些环境变量要传递给正在执行的系统命令，<env>元素可以接受以下属性。 
(1).file表示环境变量值得文件名。此文件名要被转换位一个绝对路径。 
(2).path表示环境变量的路径。Ant会将它转换为一个本地约定。 
(3).value 表示环境变量的一个直接变量。 
(4).key 表示环境变量名。 
注意 file path 或 value只能取一个。 

3.filelist类型 
Filelist 是一个支持命名的文件列表的数据类型，包含在一个filelist类型中的文件不一定是存在的文件。以下是其所有的属性。 
(1).dir是用于计算绝对文件名的目录。 
(2).files 是用逗号分隔的文件名列表。 
(3).refid 是对某处定义的一个<filelist>的引用。 
注意 dir 和 files 都是必要的，除非指定了refid(这种情况下，dir和files都不允许使用)。 

4.fileset类型　　 (---------文件集模式集) 
Fileset 数据类型定义了一组文件，并通常表示为<fileset>元素。不过，许多ant任务构建成了 

隐式的fileset,这说明他们支持所有的fileset属性和嵌套元素。以下为fileset 的属性列表。 
(1).dir表示fileset 的基目录。 
(2).casesensitive的值如果为false，那么匹配文件名时，fileset不是区分大小写的，其默认值为true. 
(3).defaultexcludes 用来确定是否使用默认的排除模式，默认为true。 
(4).excludes 是用逗号分隔的需要派出的文件模式列表。 
(5).excludesfile 表示每行包含一个排除模式的文件的文件名。 
(6).includes 是用逗号分隔的，需要包含的文件模式列表。 
(7).includesfile 表示每行包括一个包含模式的文件名。 

5.patternset 类型 (---------模式集) 
Fileset 是对文件的分组，而patternset是对模式的分组，他们是紧密相关的概念。 

<patternset>支持4个属性：includes excludex includexfile 和 excludesfile,与fileset相同。Patternset 
还允许以下嵌套元素：include,exclude,includefile 和 excludesfile. 

6.filterset 类型 (---------滤集) 
Filterset定义了一组过滤器，这些过滤器将在文件移动或复制时完成文件的文本替换。 
主要属性如下： 
(1).begintoken 表示嵌套过滤器所搜索的记号，这是标识其开始的字符串。 
(2).endtoken表示嵌套过滤器所搜索的记号这是标识其结束的字符串。 
(3).id是过滤器的唯一标志符。 
(4).refid是对构建文件中某处定义一个过滤器的引用。 

7.Path类型 
Path元素用来表示一个类路径，不过它还可以用于表示其他的路径。在用作揖个属性时，路经中的各项用分号或冒号隔开。在构建的时候 
，此分隔符将代替当前平台中所有的路径分隔符，其拥有的属性如下。 
(1).location 表示一个文件或目录。Ant在内部将此扩展为一个绝对路径。 
(2).refid 是对当前构建文件中某处定义的一个path的引用。 
(3).path表示一个文件或路径名列表。 

8.mapper类型 
Mapper类型定义了一组输入文件和一组输出文件间的关系，其属性如下。 
(1).classname 表示实现mapper类的类名。当内置mapper不满足要求时，用于创建定制mapper. 
(2).classpath表示查找一个定制mapper时所用的类型路径。 
(3).classpathref是对某处定义的一个类路径的引用。 
(4).from属性的含义取决于所用的mapper. 
(5).to属性的含义取决于所用的mapper. 
(6).type属性的取值为identity，flatten glob merge regexp 其中之一，它定义了要是用的内置mapper的类型。





1 Ant是什么？
Apache Ant 是一个基于 Java的生成工具。

生成工具在软件开发中用来将源代码和其他输入文件转换为可执行文件的形式（也有可能转换为可安装的产品映像形式）。随着应用程序的生成过程变得更加复杂，确保在每次生成期间都使用精确相同的生成步骤，同时实现尽可能多的自动化，以便及时产生一致的生成版本

2下载、安装Ant

安装Ant

下载.zip文件，解压缩到c:\ant1.3(后面引用为%ANT_HOME%)

2.1在你运行Ant之前需要做一些配置工作。

・将bin目录加入PATH环境变量。

・设定ANT_HOME环境变量，指向你安装Ant的目录。在一些OS上，Ant的脚本可以猜测ANT_HOME（Unix和Windos NT/2000）－但最好不要依赖这一特性。

・可选地，设定JAVA_HOME环境变量（参考下面的高级小节），该变量应该指向你安装JDK的目录。

注意：不要将Ant的ant.jar文件放到JDK/JRE的lib/ext目录下。Ant是个应用程序，而lib/ext目录是为JDK扩展使用的（如JCE，JSSE扩展）。而且通过扩展装入的类会有安全方面的限制。

2.2运行Ant

运行Ant非常简单，当你正确地安装Ant后，只要输入ant就可以了。

没有指定任何参数时，Ant会在当前目录下查询build.xml文件。如果找到了就用该文件作为buildfile。如果你用 -find 选项。Ant就会在上级目录中寻找buildfile，直至到达文件系统的根。要想让Ant使用其他的buildfile，可以用参数 -buildfile file，这里file指定了你想使用的buildfile。

可以指定执行一个或多个target。当省略target时，Ant使用标签<project>的default属性所指定的target。

命令行选项总结：

ant [options] [target [target2 [target3] ...]]

Options:

-help print this message

-projecthelp print project help information

-version print the version information and exit

-quiet be extra quiet

-verbose be extra verbose

-debug print debugging information

-emacs produce logging information without adornments

-logfile file use given file for log output

-logger classname the class that is to perform logging

-listener classname add an instance of class as a project listener

-buildfile file use specified buildfile

-find file search for buildfile towards the root of the filesystem and use the first one found

-Dproperty=value set property to value

Ant 命令行参考 
从命令行调用Ant 的语法如下所示：
ant [option [option...]] [target [target...]]
option := {-help
|-projecthelp
|-version
|-quiet
|-verbose
|-debug
|-emacs
|-logfile filename
|-logger classname
|-listener classname
|-buildfile filename
|-Dproperty=value
|-find filename}
语法元素说明如下：
-help
显示描述Ant 命令及其选项的帮助信息。
-projecthelp
显示包含在构建文件中的、所有用户编写的帮助文档。即为各个<target>
中description 属性的文本，以及包含在<description>元素中的任何文
本。将有description 属性的目标列为主目标（“Main target”），没有此属
性的目标则列为子目标（“Subtarget”）。
-version
要求Ant 显示其版本信息，然后退出。
-quiet
抑制并非由构建文件中的echo 任务所产生的大多数消息。
-verbose
显示构建过程中每个操作的详细消息。此选项与-debug 选项只能选其一。
-debug
显示Ant 和任务开发人员已经标志为调试消息的消息。此选项与-verbose 只
能选其一。
-emacs
对日志消息进行格式化，使它们能够很容易地由Emacs 的shell 模式（shellmode）
所解析；也就是说，打印任务事件，但并不缩排，在其之前也没有
[taskname]。
-logfile filename
将日志输出重定向到指定文件。
-logger classname
指定一个类来处理Ant 的日志记录。所指定的类必须实现了org.apache.
tools.ant.BuildLogger 接口。
-listener classname
为Ant 声明一个监听类，并增加到其监听者列表中。在Ant与IDE或其他Java
程序集成时，此选项非常有用。可以阅读第六章以了解有关监听者的更多信
息。必须将所指定的监听类编写为可以处理Ant 的构建消息接发。
-buildfile filename
指定Ant 需要处理的构建文件。默认的构建文件为build.xml。
-Dproperty=value
在命令行上定义一个特性名－值对。
-find filename
指定Ant 应当处理的构建文件。与-buildfile 选项不同，如果所指定文件在当
前目录中未找到，-find 就要求Ant 在其父目录中再进行搜索。这种搜索会继
续在其祖先目录中进行，直至达到文件系统的根为止，在此如果文件还未找
到，则构建失败。
构建文件轮廓
下面是一个通用的构建文件，它很适合作为一个模板。构建文件包括<project>
元素，以及其中嵌套的<target>、<property> 和<path> 元素。
<project default="all">
<property name="a.property" value="a value"/>
<property name="b.property" value="b value"/>
<path id="a.path">
<pathelement location="${java.home}/jre/lib/rt.jar"/>
</path>
<target name="all">
<javac srcdir=".">
<classpath refid="a.path"/>
</javac>
</target>
</project>

关于构建文件有几点需要记住：
● 所有构建文件都要有<project>元素，而且至少有一个<target> 元素。
● 对于<project> 元素的default 属性并没有默认值。
● 构建文件并不一定要被命名为build.xml。不过build.xml 是Ant 要搜索的默
认文件名。
● 每个构建文件只能有一个<project> 元素。

例子

ant

使用当前目录下的build.xml运行Ant，执行缺省的target。

ant -buildfile test.xml

使用当前目录下的test.xml运行Ant，执行缺省的target。

ant -buildfile test.xml dist

使用当前目录下的test.xml运行Ant，执行一个叫做dist的target。

ant -buildfile test.xml -Dbuild=build/classes dist

使用当前目录下的test.xml运行Ant，执行一个叫做dist的target，并设定build属性的值为build/classes。

3编写build.xml

Ant的buildfile是用XML写的。每个buildfile含有一个project。

buildfile中每个task元素可以有一个id属性，可以用这个id值引用指定的任务。这个值必须是唯一的。（详情请参考下面的Task小节）

3.1Projects

project有下面的属性：

AttributeDescriptionRequired

name项目名称.No

default当没有指定target时使用的缺省targetYes

basedir用于计算所有其他路径的基路径。该属性可以被basedir property覆盖。当覆盖时，该属性被忽略。如果属性和basedir property都没有设定，就使用buildfile文件的父目录。No

项目的描述以一个顶级的<description>元素的形式出现（参看description小节）。

一个项目可以定义一个或多个target。一个target是一系列你想要执行的。执行Ant时，你可以选择执行那个target。当没有给定target时，使用project的default属性所确定的target。

3.2Targets

一个target可以依赖于其他的target。例如，你可能会有一个target用于编译程序，一个target用于生成可执行文件。你在生成可执行文件之前必须先编译通过，所以生成可执行文件的target依赖于编译target。Ant会处理这种依赖关系。

然而，应当注意到，Ant的depends属性只指定了target应该被执行的顺序－如果被依赖的target无法运行，这种depends对于指定了依赖关系的target就没有影响。

Ant会依照depends属性中target出现的顺序（从左到右）依次执行每个target。然而，要记住的是只要某个target依赖于一个target，后者就会被先执行。

<target name="A"/>

<target name="B" depends="A"/>

<target name="C" depends="B"/>

<target name="D" depends="C,B,A"/>

假定我们要执行target D。从它的依赖属性来看，你可能认为先执行C，然后B，最后A被执行。错了，C依赖于B，B依赖于A，所以先执行A，然后B，然后C，最后D被执行。

一个target只能被执行一次，即时有多个target依赖于它（看上面的例子）。

如果（或如果不）某些属性被设定，才执行某个target。这样，允许根据系统的状态（java version, OS, 命令行属性定义等等）来更好地控制build的过程。要想让一个target这样做，你就应该在target元素中，加入if（或unless）属性，带上target因该有所判断的属性。例如：

<target name="build-module-A" if="module-A-present"/>

<target name="build-own-fake-module-A" unless="module-A-present"/>

如果没有if或unless属性，target总会被执行。

可选的description属性可用来提供关于target的一行描述，这些描述可由-projecthelp命令行选项输出。

将你的tstamp task在一个所谓的初始化target是很好的做法，其他的target依赖这个初始化target。要确保初始化target是出现在其他target依赖表中的第一个target。在本手册中大多数的初始化target的名字是"init"。

target有下面的属性：

AttributeDescriptionRequired

nametarget的名字Yes

depends用逗号分隔的target的名字列表，也就是依赖表。No

if执行target所需要设定的属性名。No

unless执行target需要清除设定的属性名。No

description关于target功能的简短描述。No

3.3Tasks

一个task是一段可执行的代码。

一个task可以有多个属性（如果你愿意的话，可以将其称之为变量）。属性只可能包含对property的引用。这些引用会在task执行前被解析。

下面是Task的一般构造形式：

<name attribute1="value1" attribute2="value2" ... />

这里name是task的名字，attributeN是属性名，valueN是属性值。

有一套内置的（built-in）task，以及一些可选task，但你也可以编写自己的task。

所有的task都有一个task名字属性。Ant用属性值来产生日志信息。

可以给task赋一个id属性：

<taskname id="taskID" ... />

这里taskname是task的名字，而taskID是这个task的唯一标识符。通过这个标识符，你可以在脚本中引用相应的task。例如，在脚本中你可以这样：

<script ... >

task1.setFoo("bar");

</script>

设定某个task实例的foo属性。在另一个task中（用java编写），你可以利用下面的语句存取相应的实例。

project.getReference("task1").

注意1：如果task1还没有运行，就不会被生效（例如：不设定属性），如果你在随后配置它，你所作的一切都会被覆盖。

注意2：未来的Ant版本可能不会兼容这里所提的属性，因为很有可能根本没有task实例，只有proxies。

3.4Properties

一个project可以有很多的properties。可以在buildfile中用property task来设定，或在Ant之外设定。一个property有一个名字和一个值。property可用于task的属性值。这是通过将属性名放在"{"和"}"之间并放在属性值的位置来实现的。例如如果有一个property builddir的值是"build"，这个property就可用于属性值：{builddir}/classes。这个值就可被解析为build/classes。

内置属性

如果你使用了<property> task 定义了所有的系统属性，Ant允许你使用这些属性。例如，{os.name}对应操作系统的名字。

要想得到系统属性的列表可参考the Javadoc of System.getProperties。

除了Java的系统属性，Ant还定义了一些自己的内置属性：

basedir project基目录的绝对路径 (与<project>的basedir属性一样)。

ant.file buildfile的绝对路径。

ant.version Ant的版本。

ant.project.name 当前执行的project的名字；由<project>的name属性设定.

ant.java.version Ant检测到的JVM的版本；目前的值有"1.1", "1.2", "1.3" and "1.4".

例子

<project name="MyProject" default="dist" basedir=".">

<!-- set global properties for this build -->

<property name="src" value="."/>

<property name="build" value="build"/>

<property name="dist" value="dist"/>

<target name="init">

<!-- Create the time stamp -->

<tstamp/>

<!-- Create the build directory structure used by compile -->

<mkdir dir="{build}"/>

</target>

<target name="compile" depends="init">

<!-- Compile the java code from {src} into {build} -->

<javac srcdir="{src}" destdir="{build}"/>

</target>

<target name="dist" depends="compile">

<!-- Create the distribution directory -->

<mkdir dir="{dist}/lib"/>

<!-- Put everything in {build} into the MyProject-{DSTAMP}.jar file -->

<jar jarfile="{dist}/lib/MyProject-{DSTAMP}.jar" basedir="{build}"/>

</target>

<target name="clean">

<!-- Delete the {build} and {dist} directory trees -->

<delete dir="{build}"/>

<delete dir="{dist}"/>

</target>

</project>

3.5Path-like Structures

你可以用":"和";"作为分隔符，指定类似PATH和CLASSPATH的引用。Ant会把分隔符转换为当前系统所用的分隔符。

当需要指定类似路径的值时，可以使用嵌套元素。一般的形式是

<classpath>

<pathelement path="{classpath}"/>

<pathelement location="lib/helper.jar"/>

</classpath>

location属性指定了相对于project基目录的一个文件和目录，而path属性接受逗号或分号分隔的一个位置列表。path属性一般用作预定义的路径－－其他情况下，应该用多个location属性。

为简洁起见，classpath标签支持自己的path和location属性。所以：

<classpath>

<pathelement path="{classpath}"/>

</classpath>

可以被简写作：

<classpath path="{classpath}"/>

也可通过<fileset>元素指定路径。构成一个fileset的多个文件加入path-like structure的顺序是未定的。

<classpath>

<pathelement path="{classpath}"/>

<fileset dir="lib">

<include name="**/*.jar"/>

</fileset>

<pathelement location="classes"/>

</classpath>

上面的例子构造了一个路径值包括：{classpath}的路径，跟着lib目录下的所有jar文件，接着是classes目录。

如果你想在多个task中使用相同的path-like structure，你可以用<path>元素定义他们（与target同级），然后通过id属性引用－－参考Referencs例子。

path-like structure可能包括对另一个path-like structurede的引用（通过嵌套<path>元素）：

<path id="base.path">

<pathelement path="{classpath}"/>

<fileset dir="lib">

<include name="**/*.jar"/>

</fileset>

<pathelement location="classes"/>

</path>

<path id="tests.path">

<path refid="base.path"/>

<pathelement location="testclasses"/>

</path>

前面所提的关于<classpath>的简洁写法对于<path>也是有效的，如：

<path id="tests.path">

<path refid="base.path"/>

<pathelement location="testclasses"/>

</path>

可写成：

<path id="base.path" path="{classpath}"/>

命令行变量

有些task可接受参数，并将其传递给另一个进程。为了能在变量中包含空格字符，可使用嵌套的arg元素。

AttributeDescriptionRequired

value一个命令行变量；可包含空格字符。只能用一个

line空格分隔的命令行变量列表。

file作为命令行变量的文件名；会被文件的绝对名替代。

path一个作为单个命令行变量的path-like的字符串；或作为分隔符，Ant会将其转变为特定平台的分隔符。

例子

<arg value="-l -a"/>

是一个含有空格的单个的命令行变量。

<arg line="-l -a"/>

是两个空格分隔的命令行变量。

<arg path="/dir;/dir2:\dir3"/>

是一个命令行变量，其值在DOS系统上为\dir;\dir2;\dir3；在Unix系统上为/dir:/dir2:/dir3 。

References

buildfile元素的id属性可用来引用这些元素。如果你需要一遍遍的复制相同的XML代码块，这一属性就很有用－－如多次使用<classpath>结构。

下面的例子：

<project ... >

<target ... >

<rmic ...>

<classpath>

<pathelement location="lib/"/>

<pathelement path="{java.class.path}/"/>

<pathelement path="{additional.path}"/>

</classpath>

</rmic>

</target>

<target ... >

<javac ...>

<classpath>

<pathelement location="lib/"/>

<pathelement path="{java.class.path}/"/>

<pathelement path="{additional.path}"/>

</classpath>

</javac>

</target>

</project>

可以写成如下形式：

<project ... >

<path id="project.class.path">

<pathelement location="lib/"/>

<pathelement path="{java.class.path}/"/>

<pathelement path="{additional.path}"/>

</path>

<target ... >

<rmic ...>

<classpath refid="project.class.path"/>

</rmic>

</target>

<target ... >

<javac ...>

<classpath refid="project.class.path"/>

</javac>

</target>

</project>

所有使用PatternSets, FileSets 或 path-like structures嵌套元素的task也接受这种类型的引用。

4Ant的Core Tasks

4.1File（Directory）类

4.1.1Mkdir

创建一个目录，如果他的父目录不存在，也会被同时创建。

例子：

<mkdir dir="build/classes"/>

说明：如果build不存在，也会被同时创建

4.1.2Copy

拷贝一个（组）文件、目录

例子：

1.拷贝单个的文件：

<copy file="myfile.txt" tofile="mycopy.txt"/>

2.拷贝单个的文件到指定目录下

<copy file="myfile.txt" todir="../some/other/dir"/>

3.拷贝一个目录到另外一个目录下

<copy todir="../new/dir">

<fileset dir="src_dir"/>

</copy>

4.拷贝一批文件到指定目录下

<copy todir="../dest/dir">

<fileset dir="src_dir">

<include name="**/*.java"/>

<iexclude name="**/Test.java"/>

</fileset>

</copy>

<copy todir="../dest/dir">

<fileset dir="src_dir" excludes="**/*.java"/>

</copy>

5.拷贝一批文件到指定目录下，将文件名后增加。Bak后缀

<copy todir="../backup/dir">

<fileset dir="src_dir"/>

<mapper type="glob" from="*" to="*.bak"/>

</copy>

6.拷贝一组文件到指定目录下，替换其中的@标签@内容

<copy todir="../backup/dir">

<fileset dir="src_dir"/>

<filterset>

<filter token="TITLE" value="Foo Bar"/>

</filterset>

</copy>

4.1.3Delete

删除一个（组）文件或者目录

例子

1.删除一个文件

<delete file="/lib/ant.jar"/>

2.删除指定目录及其子目录

<delete dir="lib"/>

3.删除指定的一组文件

<delete>

<fileset dir="." includes="**/*.bak"/>

</delete>

4.删除指定目录及其子目录，包括他自己

<delete includeEmptyDirs="true">

<fileset dir="build"/>

</delete>

4.1.4Move

移动或重命名一个（组）文件、目录

例子：

1.移动或重命名一个文件

<move file="file.orig" tofile="file.moved"/>

2.移动或重命名一个文件到另一个文件夹下面

<move file="file.orig" todir="dir/to/move/to"/>

3.将一个目录移到另外一个目录下

<move todir="new/dir/to/move/to">

<fileset dir="src/dir"/>

</move>

4.将一组文件移动到另外的目录下

<move todir="some/new/dir">

<fileset dir="my/src/dir">

<include name="**/*.jar"/>

<exclude name="**/ant.jar"/>

</fileset>

</move>

5.移动文件过程中增加。Bak后缀

<move todir="my/src/dir">

<fileset dir="my/src/dir">

<exclude name="**/*.bak"/>

</fileset>

<mapper type="glob" from="*" to="*.bak"/>

</move>

4.2Java相关

4.2.1Javac

编译java原代码

例子

1.<javac srcdir="{src}"

destdir="{build}"

classpath="xyz.jar"

debug="on"

/>

编译{src}目录及其子目录下的所有。Java文件，。Class文件将放在｛build｝指定的目录下，classpath表示需要用到的类文件或者目录，debug设置为on表示输出debug信息

2.<javac srcdir="{src}:{src2}"

destdir="{build}"

includes="mypackage/p1/**,mypackage/p2/**"

excludes="mypackage/p1/testpackage/**"

classpath="xyz.jar"

debug="on"

/>

编译{src}和{src2}目录及其子目录下的所有。Java文件，但是package/p1/**,mypackage/p2/**将被编译，而mypackage/p1/testpackage/**将不会被编译。Class文件将放在｛build｝指定的目录下，classpath表示需要用到的类文件或者目录，debug设置为on表示输出debug信息

3.<property name="classpath" value=".;./xml-apis.jar;../lib/xbean.jar;./easypo.jar"/>

<javac srcdir="{src}"

destdir="{src}"

classpath="{classpath}"

debug="on"

/>

路径是在property中定义的

4.2.2java

执行指定的java类

例子：

1.<java classname="test.Main">

<classpath>

<pathelement location="dist/test.jar"/>

<pathelement path="{java.class.path}"/>

</classpath>

</java>

classname中指定要执行的类，classpath设定要使用的环境变量

2.<path id="project.class.path">

<pathelement location="lib/"/>

<pathelement path="{java.class.path}/"/>

<pathelement path="{additional.path}"/>

</path>

<target ... >

<rmic ...>

<classpath refid="project.class.path"/>

</rmic>

</target>

4.3打包相关

4.3.1jar

将一组文件打包

例子：

1.<jar destfile="{dist}/lib/app.jar" basedir="{build}/classes"/>

将{build}/classes下面的所有文件打包到{dist}/lib/app.jar中

2.<jar destfile="{dist}/lib/app.jar"

basedir="{build}/classes"

includes="mypackage/test/**"

excludes="**/Test.class"

/>

将{build}/classes下面的所有文件打包到{dist}/lib/app.jar中，但是包括mypackage/test／所有文件不包括所有的Test.class

3.<jar destfile="{dist}/lib/app.jar"

basedir="{build}/classes"

includes="mypackage/test/**"

excludes="**/Test.class"

manifest="my.mf"

/>

manifest属性指定自己的META-INF/MANIFEST.MF文件，而不是由系统生成

4.3.2war

对Jar的扩展，用于打包Web应用

例子：

假设我们的文件目录如下：

thirdparty/libs/jdbc1.jar

thirdparty/libs/jdbc2.jar

build/main/com/myco/myapp/Servlet.class

src/metadata/myapp.xml

src/html/myapp/index.html

src/jsp/myapp/front.jsp

src/graphics/images/gifs/small/logo.gif

src/graphics/images/gifs/large/logo.gif

下面是我们的任务的内容：

<war destfile="myapp.war" webxml="src/metadata/myapp.xml">

<fileset dir="src/html/myapp"/>

<fileset dir="src/jsp/myapp"/>

<lib dir="thirdparty/libs">

<exclude name="jdbc1.jar"/>

</lib>

<classes dir="build/main"/>

<zipfileset dir="src/graphics/images/gifs"

prefix="images"/>

</war>

完成后的结果：

WEB-INF/web.xml

WEB-INF/lib/jdbc2.jar

WEB-INF/classes/com/myco/myapp/Servlet.class

META-INF/MANIFEST.MF

index.html

front.jsp

images/small/logo.gif

images/large/logo.gif

4.3.3ear

用于打包企业应用

例子

<ear destfile="{build.dir}/myapp.ear" appxml="{src.dir}/metadata/application.xml">

<fileset dir="{build.dir}" includes="*.jar,*.war"/>

</ear>

4.4时间戳

在生成环境中使用当前时间和日期，以某种方式标记某个生成任务的输出，以便记录它是何时生成的，这经常是可取的。这可能涉及编辑一个文件，以便插入一个字符串来指定日期和时间，或将这个信息合并到 JAR 或 zip 文件的文件名中。

这种需要是通过简单但是非常有用的 tstamp 任务来解决的。这个任务通常在某次生成过程开始时调用，比如在一个 init 目标中。这个任务不需要属性，许多情况下只需 <tstamp/> 就足够了。

tstamp 不产生任何输出；相反，它根据当前系统时间和日期设置 Ant 属性。下面是 tstamp 设置的一些属性、对每个属性的说明，以及这些属性可被设置到的值的例子：

属性说明例子

DSTAMP 设置为当前日期，默认格式为yyyymmdd 20031217

TSTAMP 设置为当前时间，默认格式为 hhmm 1603

TODAY 设置为当前日期，带完整的月份2003 年 12 月 17 日

例如，在前一小节中，我们按如下方式创建了一个 JAR 文件：

<jar destfile="package.jar" basedir="classes"/>

在调用 tstamp 任务之后，我们能够根据日期命名该 JAR 文件，如下所示：

<jar destfile="package-{DSTAMP}.jar" basedir="classes"/>

因此，如果这个任务在 2003 年 12 月 17 日调用，该 JAR 文件将被命名为 package-20031217.jar。

还可以配置 tstamp 任务来设置不同的属性，应用一个当前时间之前或之后的时间偏移，或以不同的方式格式化该字符串。所有这些都是使用一个嵌套的 format 元素来完成的，如下所示：

<tstamp>

<format property="OFFSET_TIME"

pattern="HH:mm:ss"

offset="10" unit="minute"/>

</tstamp>

上面的清单将 OFFSET_TIME 属性设置为距离当前时间 10 分钟之后的小时数、分钟数和秒数。

用于定义格式字符串的字符与 java.text.SimpleDateFormat 类所定义的那些格式字符相同

4.5执行SQL语句

通过jdbc执行SQL语句

例子：

1.<sql

driver="org.gjt.mm.mysql.Driver"

url="jdbc:mysql://localhost:3306/mydb"

userid="root"

password="root"

src="data.sql"

/>

2.<sql

driver="org.database.jdbcDriver"

url="jdbc:database-url"

userid="sa"

password="pass"

src="data.sql"

rdbms="oracle"

version="8.1."

>

</sql>

只有在oracle、版本是8.1的时候才执行

4.6发送邮件

使用SMTP服务器发送邮件

例子：

<mail mailhost="smtp.myisp.com" mailport="1025" subject="Test build">

<from address="me@myisp.com"/>

<to address="all@xyz.com"/>

<message>The {buildname} nightly build has completed</message>

<fileset dir="dist">

<includes name="**/*.zip"/>

</fileset>

</mail>

mailhost： SMTP服务器地址

mailport：服务器端口

subject：主题

from：发送人地址

to：接受人地址

message：发送的消息

fileset：设置附件




  

二．搭建ANT运行环境

  

1、将ant1.6.1解压缩到任意目录，假设解压缩到C:\apache-ant-1.6.1目录中

2、然后在path路径中添加   C:\apache-ant-1.6.1\bin

3、再classpath中添加   C:\apache-ant-1.6.1\lib

三、ANT的组成（主要由三部分组成：Project、Target、Task）

1、Project(项目)。基本属性：name、default、basedir。一个build.xml只能存在一个Project工程。

name ：项目名称

default ：缺省开始执行的Target

basedir ：用于计算所有其他路径的基路径。

  

例1：<project name="dev" basedir="." default="dist">

  

2、Target。一个项目可以定义一个或多个Target、一个Target是一系列你想要执行的任务，如编译任务、打包任务、混淆任务。

   

Target的基本属性： name：target的名字，depends：该target依赖关系，description： target的描述信息。

  

例2：<target name="clean" depends="init" description="Clean dist and temp directories">

  

Ant在执行时以Target为单位，Target的depends属性又决定了哪个Target先执行，因此我们可以通过Target来构造编译顺序。

  

例3：<target name="copy" >
       <target name="javac" depends="copy">

       <target name="jar" depends="javac">

执行顺序是从下至上，依次执行，如果某个Target没有depends属性，那么就顺序执行。

  

例4：一个完整的Target：

<target name="compile" depends="replacesrc"   description="Compiling Java source files">

     <javac   srcdir="temp/src"  

             destdir="temp/build"

             debug="on"

             deprecation="false"

             optimize="true">

     <classpath refid="classpath"/>

     </javac>
</target>

3、Task。Ant执行的一系列任务是由Target构成的，而Target又是由数个小的Task构成的，task任务是最小的运行单位，我们可以把copy、delete、mkdir等操作认为是一个小任务。

(1)copy任务。

A．拷贝单个文件:

<copy file="Demo/manifest.mf" todir="temp/build/META-INF" /> 
解释：把一个文件拷贝到拷贝相关文件夹中。

B．拷贝文件夹：

<copy todir="temp/build">
     <fileset dir="temp/classes"/>
   </copy> 
     解释：把temp/build目录下的所有文件，拷贝到temp/classes目录中去

C.替换拷贝
<copy todir="temp/build">
   <fileset dir="temp/classes" includes="*.class" />
   <filterset>
        <filter token="@Time@" value="${app.time}"/>
   </filterset>
</copy> 
   解释：   <filterset>过滤集，可以将temp/classes文件夹下的存在@Time@标记的文件，替换为变量${app.time}值。这样在完成拷贝的同时也完成了替换任务。

(2)mkdir任务和delete任务

A．单独的delete和mkdir任务
      <delete dir="temp/src"/> 
      <delete file="temp/build/Thumbs.db" />
      <mkdir dir="temp/src"/>
   
    B. 带有条件的删除任务
       <delete>
         <fileset dir="store" includes="*.*"/>
         <fileset dir="source" excludes="*.java"/>                                  </delete>       
       解释：include表示要删除哪些文件；而excludes表示排除的文件；

（3）replace替换任务

A．替换某一文件中的字符串

<replace file ="base/testing.txt">
token="@temp@" 
value="${newstring}"
</replace>

解释：token是需要替换的标记；value是新值，将testing.txt文件中的@temp@替换为新值。

B．替换某个文件夹中存在特定标记的文件

<replace dir="temp" token="@CHARSET@" value="${webapp.charset}"/>  

解释：temp目录中文件，如果有存在@CHARSET@标记的，将被替换为${webapp.charset}变量值。

C.批量替换

<replace dir="dist" includes="${app.project}.jad" encoding="UTF-8">

<replacefilter token="@NAME@" value="${app.name}"/>
     <replacefilter token="@VENDOR@" value="${app.vendor}"/>
     <replacefilter token="@MIDLET@" value="${app.midlet}"/>
     <replacefilter token="@JAR@" value="${app.project}"/>
     <replacefilter token="@FILESIZE@" value="${size}"/>
     <replacefilter token="@DESCRIPTION@" value="${app.description}"/>             <replacefilter token="@PRICE@" value="${app.price}"/>

</replace>

(4) javac任务 ,编译源程序

<target name="Compile" description="Compile Java source files">

<javac srcdir="src"

destdir="temp/classes"

bootclasspath="${compile.classpath}"

target="1.1"

debug="on"

deprecation="on"

includes="*.java"

optimize="true"

encoding="UTF-8"/>  

</target>

解释：bootclasspath参数（启动类库）：它已经包含了jre/lib目录下的rt.jar，以及我们自定义的类库。如果使用classpath参数，仅指我们定义的类库；

(5) java任务 。为运行Java应用程序，需要使用java任务

A．运行一个类

<target name="run" description="Run the program">

     <java classname="${main}" classpath="${classpath}"/>

</target>

解释：classname表示要运行的主类。

B．运行某一特定类，并加上运行参数。

<java fork="true" classname="proguard.ProGuard" classpath="${proguard.classpath}">

             <arg line="-libraryjars ${proguard.classpath}"/>

             <arg line="-injars temp/${app.project}_tmp.jar"/>

             <arg line="-outjar temp/${app.project}_obf.jar"/>

             <arg line="-defaultpackage ''"/>

             <arg line="-dontusemixedcaseclassnames"/>

             <arg line="-keep public class ${app.midlet}"/>

</java>

解释：fork参数：为true时，在新的JVM实例中运行，不影响当前JVM工作

如何减少文件的size?

使用3.3.2版本的proguard.jar,然后在混淆参数中添加两行代码:

<arg line = "-overloadaggressively"/>                   
<arg line="-keepclasseswithmembers public class ${app.midlet} {public void startApp();public void destroyApp(boolean);}"/>

这样可以保证startApp和destroyApp不被打上Final修饰符,同时还能更大的压缩代码,不过要求Midlet类中startApp和destroyApp方法保持上面的形式。

（6）JAR任务

将编译好的CLASS文件打成JAR包，这是JAR任务的工作：

<target name="jar" depends="Compile" description="Build jar file">

<jar jarfile="dist/${name}.jar"

       basedir="${tmp/class}"

manifest="tmp/res/manifest.mf"

manifestencoding="UTF-8">

   <fileset dir="res" includes="*.*"/> <!-- 将res目录中的文件也打进JAR包 -->

</jar>

</target>

         

（7）exec任务，用以调用外部程序

<exec executable="${LIB_PATH}/preverify.exe">

    <arg line="-classpath ${compile.classpath} -d temp/build temp/obfuscate"/>

</exec>

四、ANT的参数部分：

  

-quiet（不显示大多数build信息）

-verbose（显示构建过程的每个操作的详细信息）

-buildfile filename.xml 构建特定的xml文件

-Dproperty=value 设定特别的外部参数，外部参数可以传递给内部变量

-find filename.xml 它会让ANT自动查找当前的目录、父目录中的xml文件，直到失败

  

例：

ant -buildfile test.xml

  

使用当前目录下的test.xml运行Ant

  

ant -buildfile test.xml dist

  

使用当前目录下的test.xml运行Ant，执行一个叫做dist的target。

  

ant -buildfile test.xml -Dbuild=build/classes dist

  

使用当前目录下的test.xml运行Ant，执行一个叫做dist的target，并设定build变量的值为build/classes。

  

五、自定义TASK

  

ANT已经内置了不少task，像copy、replace、javac等等，但是有时候还需要一些特定的任务来完成操作，比如在生成JAD文件时，需要一个Midlet-Jar-Size的参数，得到JAR文件的大小，但是通过内部的task无法实现，因此可以自己编写类来实现此功能，但必须保证该类是从Task类继承过来的。

  

例：

<taskdef name="filesize" classname="ant.FileSizeTask" classpath="${LIB_PATH}/FileSizeTask.jar" />

<filesize file="${Base}/Demo_Build/${jarName}" property="size" />

   <replace dir="store" includes="${jadName}" encoding="UTF-8">

      <replacefilter token="@FILESIZE@" value="${size}" />

</replace>

  

解释：taskdef：自定义任务，name：任务名  

编写Ant 自定义任务很简单，Ant 能够使用生成文件中指定的对应属性的值来调用这个方法，这个方法的名称需要是 set 加上属性的名称，因此在下面的例子中，我们需要名为 setFile() 和 setTofile() 的两个方法。

当 Ant 遇到生成文件中的一个属性设置时，它会寻找相关任务中具有适当名称的方法（称为 setter 方法）。

生成文件中的属性是作为字符串来指定的，因此我们的 setter 方法的参数可以是一个字符串。在这样的情况下，Ant 将在展开值所引用的任何属性之后，使用该属性的字符串值来调用我们的方法。

但有时我们想把属性的值看作是一种不同的类型。这里的示例任务就是这种情况，其中的属性值引用文件系统上的文件，而不只是引用任意的字符串。可以通过将方法参数声明为 java.io.File 类型来容易地做到这点。

Ant 将接受属性的字符串值，并把它解释为一个文件，然后传递给我们的方法。Ant 能够对其他类型执行类似的转换，比如 boolean 和 int 类型。但如果提供具有相同名称但是具有不同参数的两个方法，Ant 将使用更明确的那一个方法，因此文件类型将优先于字符串类型。

例：一个排序的task任务

public class FileSorter extends Task {

private File file, tofile;

// ant在进行任务处理时会调用execute()方法

     public void execute() throws BuildException {

         System.out.println("Sorting file="+file);

         try {

             BufferedReader from =

                 new BufferedReader(new FileReader(file));

             BufferedWriter to =

                 new BufferedWriter(new FileWriter(tofile));

             List allLines = new ArrayList();

             // read in the input file

             String line = from.readLine();

             while (line != null) {

                 allLines.add(line);

                 line = from.readLine();

             }

             from.close();

             // sort the list

             Collections.sort(allLines);

             // write out the sorted list

             for (ListIterator i=allLines.listIterator(); i.hasNext(); ) {

                 String s = (String)i.next();

                 to.write(s); to.newLine();

             }

             to.close();

         } catch (FileNotFoundException e) {

             throw new BuildException(e);

         } catch (IOException e) {

             throw new BuildException(e);

         }

     }

     // file参数

     public void setFile(File file) {

         this.file = file;

     }

     // tofile参数

     public void setTofile(File tofile) {

         this.tofile = tofile;

     }

}

使用这个自定义任务：

<taskdef name="filesorter"   classname=" FileSorter" classpath="filesorter"/>

    <target name="main">

         <filesorter file="input.txt" tofile="output.txt"/>

    </target>

  

解释：file和tofile分别是程序入口、出口