TIMESTAMP类型
・在创建表时可以使用该型类作为时间戳
・last_update_date字段会在初始化和值改变时自动填充为当前时间
CREATE TABLE tbl_test (
	pk_id VARCHAR(50) NOT NULL,
	last_update_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (pk_id)
);
・一张表中只允许一个TIMESTAMP字段出现 DEFAULT 或 ON UPDATE
・所以，下述建表语句是非法的
CREATE TABLE tstmyyms (
	user_id VARCHAR(50) NOT NULL,
	date_1  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	date_2 TIMESTAMP NOT NULL ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (user_id)
);
・需要使用TIMESTAMP类型进行DEFAULT或ON UPDATE时，可以使用DATETIME类型替代，然后使用trigger进行模拟操作
・如：
create table t_absence_code
(
   absenceId            BIGINT not null auto_increment,
   absenceCode          VARCHAR(255) not null,
   absenceDesc          text not null,
   createDate           datetime,					-- 使用datetime代替timestamp
   startDate            date default NULL,
   endDate              date default NULL,
   lastUpdateDate       TIMESTAMP not null default CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
   primary key (absenceId)
)
ENGINE=INNODB;

-- 使用trigger模拟timestamp的行为
delimiter //
create trigger tig_absence_code_createDate before insert
on t_absence_code for each row
begin
set new.createDate=now();
end; //
delimiter ;


・修改将自增列的初始值
・该语句将users表的自动增长列设置为从150000开始
mysql> ALTER TABLE users AUTO_INCREMENT = 150000;


・显示所有数据库
mysql> show databases;


・显示某数据库所有表
mysql> show tables;


・显示所有触发器
mysql> show triggers;


・删除触发器
mysql> drop trigger trigger_name;


・创建本表INSERT触发器
・DELIMITER //	用来将默认的结束符号分号(;)换成双斜杠(//)，因为触发器中的分号(;)并不意味着执行之前的语句
・以下命令在表users上创建了一个名为tg_users_start_date的触发器
・该触发器在插入users表之前将插入语句的start_date字段的值设为系统默认的当前时间，通过使用系统函数now()

mysql> DELIMITER //
mysql> CREATE TRIGGER tg_users_start_date
mysql> BEFORE INSERT ON users
mysql> FOR EACH ROW
mysql> BEGIN
mysql> 	set new.start_date=now();
mysql> END; //


・创建本表UPDATE触发器
・DELIMITER //	用来将默认的结束符号分号(;)换成双斜杠(//)，因为触发器中的分号(;)并不意味着执行之前的语句
・以下命令在表users上创建了一个名为tg_users_lud的触发器
・该触发器在更新users表之前将更新语句的last_update_date字段的值设为系统默认的当前时间，通过使用系统常量current_timestamp

mysql> DELIMITER //
mysql> CREATE TRIGGER tg_users_lud
mysql> BEFORE UPDATE ON users
mysql> FOR EACH ROW
mysql> BEGIN
mysql> 	set new.last_update_date=current_timestamp;
mysql> END; //


・创建多表触发器
・DELIMITER //	用来将默认的结束符号分号(;)换成双斜杠(//)，因为触发器中的分号(;)并不意味着执行之前的语句
・以下命令在表user_claim_hour上创建了一个名为tg_user_claim_hour_approve_hour的触发器
・该触发器在表user_claim_hour中字段status_id被更新为3的时候，会更新表project_hours中字段approved_hours和remained_hours的值
・set @claim_hour = new.claim_hour;
・声明一个名为@claim_hour变量，并将它的值设置为user_claim_hour表中被更新的行的字段claim_hour的值

mysql> DELIMITER //
mysql> CREATE TRIGGER tg_user_claim_hour_approve_hour
mysql> AFTER UPDATE ON user_claim_hour
mysql> FOR EACH ROW
mysql> BEGIN
mysql> IF new.status_id=3 then
mysql> set @claim_hour = new.claim_hour;
mysql> set @project_id = new.project_id;
mysql> UPDATE project_hours SET approved_hours=approved_hours + @claim_hour, remained_hours=remained_hours - @claim_hour WHERE project_id=@project_id;
mysql> END IF;
mysql> END//


・开始event
・event需要MySQL5.1以上版本支持
・该语句开启数据库的event支持
SET GLOBAL event_scheduler = ON;


・创建event
SET GLOBAL event_scheduler = ON;
mysql> DELIMITER //
mysql> CREATE EVENT e_yearly 
mysql> ON SCHEDULE 
mysql> EVERY 1 YEAR
mysql> DO
mysql> UPDATE common_code_user_rel 
mysql> SET remain_hours=remain_hours+5, respective_year=YEAR(NOW()) 
mysql> WHERE common_code_id='2';
mysql> //


・创建存储过程
DELIMITER //
CREATE PROCEDURE proc_name()
BEGIN
	declare i integer;
	set i=1;
	while i < 100
		do
			sql_statement;
		end;
	end while;
END
//
DELIMITER ;


・查看存储过程名
SELECT `name` FROM mysql.proc WHERE db = 'your_db_name' AND `type` = 'PROCEDURE';

・查看函数和存储过程名
Select name FROM mysql.proc WHERE db = 'your_db_name' AND type = 'PROCEDURE' or type = 'FUNCTION';

 
・查看存储过程创建语句
SHOW CREATE proc_name


・查看建表语句
SHOW CREATE TABLE table_name


・查看一个数据库所有主外键
SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_SCHEMA='Database_name'

修改字段类型
ALTER TABLE table_name MODIFY COLUMN column_name data_type;

修改字段名称
ALTER TABLE t_user_claim_hour change claimCodeId taskUserRelId bigint not null;

增加字段
ALTER TABLE table_name ADD column_name_1 data_type AFTER column_name_0;

删除外键
ALTER TABLE table_name DROP FOREIGN KEY fk_name; 